### Configuration file for qopen package in JSON format
# Comments are indicated with "#" and ignored while parsing

{

### Options for input and output ###


# We only use a subset of 8 events and 6 stations
# and a subset of possible frequency bands to speed up the computation


# Filename of events file (format supported by ObsPy)
# Filename of inventory of stations (format supported by ObsPy)
#"events": "../data/events56.csz",
#"inventory": "../data/stations.xml",

"events": "../data/events8.csz",
"inventory": "../data/stations_selected.xml",

# Data can be
#   1. a glob expression of files. All files are read at once. If you have
#      a huge dataset think about using option 3.
#   2. one of the client modules supported by ObsPy (e.g "fdsn")
#      for getting the data from a webservice.
#      Option "client_options" are passed to Client.__init__.
#      See the documentation of the clients in ObsPy for available options.
#      "client_options": {"user": "name@insitution.com"},
#   3. "plugin" e.g. for a heterogenous dataset. You have to tell Qopen
#       how to access the data. In this case the option "plugin" is
#       available.
"data": "plugin",

# Plugin "module : func"
# 'module' has to be importable (located in current path or PYTHON_PATH
# environment variable).
# 'func' has to be the function which returns the data.
# Kwargs passed to func are: network, station, location, channel,
# starttime, endtime and event
# Example using FSDN client:
#     # in module.py
#     from obspy.clients.fsdn import Client
#     client = Client()
#     def func(**kwargs):
#         kwargs.pop('event')  # event kwarg is not needed by client
#         return client.get_waveforms(**kwargs)
"plugin": "data : get_data",

# Request window of data in s relative to origin time
"request_window": [-50, 100],
"request_window_tolerance": 30,

"output": "results.json",
"indent": 2,
"logfile": "log.txt",
"loglevel": 3,
"njobs": null,


### Options for inversion ###

"invert_events_simultaneously": false,  # You only want to set this option to true if only 1 or 2 stations are available
# If previous option is false, the results are determined as a mean
# of the inversions for individual events. "mean" can take the values
# "robust" (downweights outliers), "weigthed" (uses errors), all other values
# use the normal average.
"mean": "robust", 
# Mean shear wave velocity in m/s for calculating the Green's function.
# Has also impact on the calculation of the source displacement spectrum
"v0": 3200,
# Mean density in kg/m**3.
# Important for calculating the correct observed energy
"rho0": 2700,
# Geometric mean of station amplification factors for energy,
# is assumed to be 1
# Important for calculating the correct modeled energy and therefore
# scales W: W ~ 1/R0, ωM ~ 1/R0^(1/2)
"R0": 1,
# Correction factor for free surface.
# According to Emoto (2010) the factor is around 4 for S-waves.
# Specify a tuple like (4, 1) to use the first value for surface stations
# and the second value for borehole stations. By default correction factors
# for surface and borehole stations are the same to allow the direct comparison
# of obtained site responses.
"free_surface": 4,
# Optimization options for the scattering coefficient.
# Values are passed to scipy.optimize.minimize_scalar.
# 'method' can be one of 'brent', 'golden', 'bounded'
# 'tol' defines the relative tolerance for finding the optimal solution
"optimize": {"method": "golden", "tol": 1e-1},
# Bounds for optimization. Optimal parameters near the bounds will be
# treated as unphysical and corresponding results will be discarded
# 'g0_bounds' bounds for (transport) scattering coefficient
# 'b_bounds' bounds for intrinsic attenuation
"g0_bounds": [1e-8, 1e-3],
"b_bounds": [1e-3, 10],
# Remove instrument response. One of null, "sensitivity", "full".
# Instrument response has to be available in the inventory.
# This option is important for the calculation of W and ωM
"remove_response": "sensitivity",
# Filter options passed to obspy.core.Stream.filter for filtering the
# different frequency bands (see obspy.core.Stream.filter).
"filter": {"corners": 2, "zerophase": true},
# Define frequency bands:
# width - difference between higher and lower corner frequency in octave
# cfreqs - list of central frequencies
"freqs": {"width": 1, "cfreqs": [3.0, 6.0, 12.0, 24.0, 48.0]},

# Use picks given in events file to determine the P- and S-onset.
# Picks can also be used to calculate v0. If a station does not have a
# S pick (S or Sg) it is ignored.
"use_picks": true,

# Otherwise these velocities are used together with the distance between
# preferred origin and station to determine the onsets
#"vp": 6000,
#"vs": 3500,

"remove_noise": true,

# Definition of three different time windows
# - List of time windows to determine the noise level (noise_windows)
#   (the minimum of the noise levels determined in the individual time
#   windows is used)
# - Time window for calculation of the direct energy (bulk_window)
#   The energy is integrated in this time window
# - Time window defining the coda (coda_window)
# Time windows are a list of two values (start and end time).
# The start time and end time can be a string, e.g.:
# - 'P-10s', 'S+10s', 'OT+10s' (seconds relative to onset or origin time),
# - '1.2Stt', '0.8Ptt' (travel time relative to onset travel time '1Stt'),
# - '3SNR' (only for end time of codawindow, time after start time when
#          the energy hits this level relative to the noise level) or
# - 'time>3SNR' (same as previous, but time after which the noise level
#                is checked is explicitly given, e.g. "S+10s>3SNR")
# The start time and end time can also be a list, in this case the largest
# start time and the smallest end time is chosen.
"noise_windows": [["OT-25s", "OT-20s"], ["OT-20s", "OT-10s"], ["OT-10s", "OT+0s"]],
"bulk_window": ["S-1s", "S+3s"],
"coda_window": ["S+3s", ["S+50s", "2SNR"]], # Coda window ends 50s after S-onset or if SNR of 2 is reached.

# The weight of the bulk window (list of value and unit) relative to the coda window
# Here is it weighted with the length of the bulk window
"weight" : [1, "bulkwindow"],
# Smooth the coda over 'smooth' seconds (null for no smoothing)
"smooth": 1,
"smooth_window": "flat",
# Cut coda if a local minimum is present in data (e.g. because of a second
# earthquake with bulk waves arriving in the coda). Local maxima in the coda
# are compared to previous local minima. If the ratio between a maximum and
# the lowest minimum before the maximum is above a threshold the coda window
# will end at time of the minimum.
# Coda can optionally be smoothed before this operation.
"cut_coda": {"smooth": 1, "ratio": 3},
# Skip station if one of these conditions is fulfilled.
# Possible conditions:
# - "coda_window" shorter than 2 seconds
# - "num_pairs" number of station event pairs smaller than 3
 "skip": {"coda_window": 2,
          "num_pairs": 3},
# Calculate the seismic moment from the source displacement spectrum.
# Possible values:
# null: no calculation of the seismic moment
# "mean" of the values for frequencies smaller than 'fc',
# "fit" fit source displacement spectrum to source model
# "robust_fit" robustly fit source displacement spectrum to source model
# The model is defined in qopen.source.source_model()
# The options passed to qopen.source.fit_sds() (see documentation there) are
# defined in the seismic_moment_options dictionary. It is for example possible
# to invert the source displacement spectrum for fc, n and gamma simultaneously
# or to fix a subset of the parameters and invert for the others.
"seismic_moment_method": "robust_fit",
"seismic_moment_options": {"fc": null, "n": null, "gamma": 2,
                           "fc_lim": [0.5, 20], "num_points": 4},

### Plot options ###

### Plot options ###

# For all parameters which can be used in the plot_*_options dictionaries see the qopen.imaging module.

# Plot observed energies
"plot_energies": false,

# Plot optimization routine
# num: Number of fit plots
# fname: filename gets populated by eventid and freq_band
"plot_optimization": false,
"plot_optimization_options": {"num": 7,
                              "fname": "plots/optimization_{evid}_{f1:06.2f}Hz-{f2:06.2f}Hz.png"},

# Plot fits for optimization result
# fname: filename gets populated by eventid and freq_band
"plot_fits": true,
"plot_fits_options": {"fname": "plots/fits_{evid}_{f1:06.2f}Hz-{f2:06.2f}Hz.png",
                      "xlim": [-5, 105]},

# Plot scattering parameters and magnitude estimation for one event
# fname: filename gets populated by eventid
"plot_eventresult": true,
"plot_eventresult_options": {"fname": "plots/eventresult_{evid}.png"},

# Plot site corrections for one event
# fname: filename gets populated by eventid
"plot_eventsites": true,
"plot_eventsites_options": {"fname": "plots/eventsites_{evid}.png"},

# Plot mean attenuation and scattering properties
"plot_results": true,
"plot_results_options": {"fname": "plots/results.pdf", "llim": [0.5e1, 0.5e3], "Qlim": [1e-4, 1e-1]},

# Plot mean site amplification factors
"plot_sites": true,
"plot_sites_options": {"fname": "plots/sites.pdf",  "ylim": [1e-1, 1e3]},

# Plot source displacement spectra
"plot_sds": true,
"plot_sds_options": {"fname": "plots/sds.pdf"}, # "nx": 8, "figsize": [14, 14],  , "annotate": true

# Plot comparison between magnitude determined by this script and magnitude
# from event file
"plot_mags": true,
"plot_mags_options": {"fname": "plots/mags.pdf"}


}
